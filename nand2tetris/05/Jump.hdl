// chip that computes jump or branch result
// takes 5 inputs, 3 jump bits, zr and ng, 2 1-bit flags given by ALU
// outputs 1-bit value load which tells whether to branch or not.

// jump: 000 => no jump => load = 0 always
//       001 => jgt     => load = 1 when zr and ng both are 0 
//       010 => jeq     => load = 1 when zr=1
//       011 => jge     => load = 1 when ng=0
//       100 => jlt     => load = 1 when ng=1
//       101 => jne     => load = 1 when zr=0
//       110 => jle     => load = 1 when ng=1 or zr=1
//       111 => jmp     => load = 1 always

CHIP Jump{
    IN jump[3], zr, ng;
    OUT load;

    PARTS:
    And(a=jump[1],b=zr,out=w1);
    And(a=jump[2],b=ng,out=w2);

    Not(in=zr,out=zrBar);
    Not(in=ng,out=ngBar);
    
    And(a=ngBar,b=zrBar,out=w3);
    And(a=w3,b=jump[0],out=w4);
    
    Or(a=w4,b=w2,out=w5);
    Or(a=w5,b=w1,out=load);
}